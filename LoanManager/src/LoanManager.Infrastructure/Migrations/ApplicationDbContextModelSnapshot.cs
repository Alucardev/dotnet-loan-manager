// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoanManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoanManager.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Dni")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("dni");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Installments.Installment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<int?>("InstallmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("installment_number");

                    b.Property<Guid?>("LoanId")
                        .HasColumnType("uuid")
                        .HasColumnName("loan_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_installments");

                    b.HasIndex("LoanId")
                        .HasDatabaseName("ix_installments_loan_id");

                    b.ToTable("installments", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Loans.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EmissionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("emission_date");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_loans");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_loans_client_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_loans_plan_id");

                    b.ToTable("loans", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("InstallmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("installment_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("InstallmentId")
                        .HasDatabaseName("ix_payments_installment_id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WriteUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateUser"
                        });
                });

            modelBuilder.Entity("LoanManager.Domain.Plans.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Frequency")
                        .HasColumnType("integer")
                        .HasColumnName("frequency");

                    b.Property<decimal?>("Interest")
                        .HasColumnType("numeric")
                        .HasColumnName("interest");

                    b.Property<decimal?>("Penalty")
                        .HasColumnType("numeric")
                        .HasColumnName("penalty");

                    b.Property<int?>("TotalInstallments")
                        .HasColumnType("integer")
                        .HasColumnName("total_installments");

                    b.HasKey("Id")
                        .HasName("pk_plans");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cliente"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("LoanManager.Domain.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_roles_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_roles_permissions_permission_id");

                    b.ToTable("roles_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("LoanManager.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Users.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("LoanManager.Domain.Installments.Installment", b =>
                {
                    b.HasOne("LoanManager.Domain.Loans.Loan", null)
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .HasConstraintName("fk_installments_loan_loan_temp_id");

                    b.OwnsOne("LoanManager.Domain.Shared.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("InstallmentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .HasColumnType("text")
                                .HasColumnName("amount_currency_type");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric")
                                .HasColumnName("amount_total");

                            b1.HasKey("InstallmentId");

                            b1.ToTable("installments");

                            b1.WithOwner()
                                .HasForeignKey("InstallmentId")
                                .HasConstraintName("fk_installments_installments_id");
                        });

                    b.Navigation("Amount");
                });

            modelBuilder.Entity("LoanManager.Domain.Loans.Loan", b =>
                {
                    b.HasOne("LoanManager.Domain.Clients.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_loans_clients_client_id1");

                    b.HasOne("LoanManager.Domain.Plans.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .HasConstraintName("fk_loans_plan_plan_temp_id");

                    b.OwnsOne("LoanManager.Domain.Shared.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("LoanId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .HasColumnType("text")
                                .HasColumnName("amount_currency_type");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric")
                                .HasColumnName("amount_total");

                            b1.HasKey("LoanId");

                            b1.ToTable("loans");

                            b1.WithOwner()
                                .HasForeignKey("LoanId")
                                .HasConstraintName("fk_loans_loans_id");
                        });

                    b.Navigation("Amount");
                });

            modelBuilder.Entity("LoanManager.Domain.Payments.Payment", b =>
                {
                    b.HasOne("LoanManager.Domain.Installments.Installment", null)
                        .WithMany()
                        .HasForeignKey("InstallmentId")
                        .HasConstraintName("fk_payments_installments_installment_id1");

                    b.OwnsOne("LoanManager.Domain.Shared.Amount", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .HasColumnType("text")
                                .HasColumnName("amount_currency_type");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric")
                                .HasColumnName("amount_total");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId")
                                .HasConstraintName("fk_payments_payments_id");
                        });

                    b.OwnsOne("LoanManager.Domain.Shared.Amount", "Surcharge", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CurrencyType")
                                .HasColumnType("text")
                                .HasColumnName("surcharge_currency_type");

                            b1.Property<decimal>("Total")
                                .HasColumnType("numeric")
                                .HasColumnName("surcharge_total");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId")
                                .HasConstraintName("fk_payments_payments_id");
                        });

                    b.Navigation("Amount");

                    b.Navigation("Surcharge");
                });

            modelBuilder.Entity("LoanManager.Domain.Roles.RolePermission", b =>
                {
                    b.HasOne("LoanManager.Domain.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_permissions_permissions_id");

                    b.HasOne("LoanManager.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_roles_role_id");
                });

            modelBuilder.Entity("LoanManager.Domain.Users.UserRole", b =>
                {
                    b.HasOne("LoanManager.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("LoanManager.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
